import asyncio
import datetime
import logging

from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram import F

from core.db.models import del_msgs
from core.db.scripts import get_user_data, get_user_by, get_wish_settings, update_day_counter, update_started_status, \
    create_del_msg, del_user_msgs
from core.keyboards.wish_kb import y_or_n, instruction_2, instruction_3

router = Router()


@router.callback_query()
async def get_callback(call: CallbackQuery):
    data = call.data
    user_data = get_user_by(call.message.chat.id)[0]
    wish_s = get_wish_settings()
    if data == "instruction":
        await call.message.edit_reply_markup(reply_markup=None)
        await call.message.answer("""ü™ß–ö–∞—Ä—Ç—É –∂–µ–ª–∞–Ω–∏–π –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –≤–∏–¥–µ –∏–ª–∏ –Ω–∞ –±—É–º–∞–≥–µ.
–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–∞—Ä—Ç—ã –∂–µ–ª–∞–Ω–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ—é —Å–∞–º—É—é –ª—É—á—à—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –¢—É, –≥–¥–µ –≤—ã –Ω–∞ —Å–µ–±—è –ª—é–±—É–µ—Ç–µ—Å—å. –°–¥–µ–ª–∞–Ω–Ω—É—é –≤ –º–æ–º–µ–Ω—Ç—ã —Å–∞–º–æ–≥–æ –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ —Å—á–∞—Å—Ç—å—è –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è. –í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∫–æ—è –∏ –≥–∞—Ä–º–æ–Ω–∏–∏. –°–æ–≤–µ—Ç—É–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–æ –Ω–∞—á–∞–ª–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∞!
–î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:---–¢–∞–∫ –∂–µ –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —à–∞–±–ª–æ–Ω –∫–∞—Ä—Ç—ã, –∫—É–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
–î–ª—è –±—É–º–∞–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:
‚úÖ–í–∞—Ç–º–∞–Ω —Ñ–æ—Ä–º–∞—Ç–∞ –ê2 –∏–ª–∏ –ê1.‚úÖ–õ–∏–Ω–µ–π–∫–∞, –∫–∞—Ä–∞–Ω–¥–∞—à–∏/—Ñ–ª–æ–º–∞—Å—Ç–µ—Ä—ã –¥–ª—è –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏‚úÖ–ö–ª–µ–π - –∫–∞—Ä–∞–Ω–¥–∞—à/—Å–∫–æ—Ç—á –¥–ª—è –ø—Ä–∏–∫–ª–µ–∏–≤–∞–Ω–∏—è –Ω—É–∂–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫‚úÖ–ö–∞—Ä—Ç–∏–Ω–∫–∏ –º–æ–∂–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–µ –∏–ª–∏ –≤—ã—Ä–µ–∑–∞—Ç—å –∏–∑ –∂—É—Ä–Ω–∞–ª–æ–≤ –∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤.
‚ú® –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏—è—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Å–≤–µ—á–∏ –∏ –≤–∫—É—Å–Ω—ã–π —á–∞–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç —Å –ø—Ä–∏—è—Ç–Ω–æ–π –º—É–∑—ã–∫–æ–πüçµ.""")

    if call.data == "yes":
        await call.message.edit_reply_markup(reply_markup=None)
        await call.message.answer(text=wish_s.get("positive").get(str(user_data.get("day_counter"))))
        update_day_counter(call.message.chat.id)

    if call.data == "no":
        await call.message.edit_reply_markup(reply_markup=None)
        await call.message.answer(text=wish_s.get("negative").get(str(user_data.get("day_counter"))))
        update_day_counter(call.message.chat.id)

    if call.data == "moon_calendar":
        await call.message.answer(text="""01.01-13.01, 30.01-11.02, 01.03-13.03, 30.03-12.04, 28.04-11.05, 28.05-10.06, 26.06-09.07, 25.07-08.08, 24.08-06.09, 22.09-05.10, 22.10-04.11, 21.11-04.12, 21.12-31.12""", reply_markup=instruction_2.as_markup())

    if call.data == "start_magic":
        update_started_status(call.message.chat.id)
        user = get_user_data()[0]
        if user.get("day_counter") <= 9:
            user_day = user.get("day_counter", 1)
            await call.message.edit_reply_markup(reply_markup=instruction_3.as_markup())
            message = await call.message.answer(text=wish_s.get("tasks").get(str(user_day)))
            try:
                create_del_msg("task", message.message_id, message.chat.id)
            except:
                ...


async def send_users_msg(bot: Bot):
    users = get_user_data()
    wish_s = get_wish_settings()
    await del_user_msgs(bot, "task")
    for user in users:
        if user.get("day_counter") <= 9:
            user_day = user.get("day_counter", 1)
            message = await bot.send_message(user.get("tg_id"), text=wish_s.get("tasks").get(str(user_day)))
            create_del_msg("task", message.message_id, message.chat.id)


async def send_users_end_msg(bot: Bot):
    users = get_user_data()
    await del_user_msgs(bot, "question")
    for user in users:
        if user.get("day_counter") <= 9:
            message = await bot.send_message(user.get("tg_id"), "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Å–µ–∫—Ç–æ—Ä –∫–∞—Ä—Ç—ã —É–∂–µ –≥–æ—Ç–æ–≤?", reply_markup=y_or_n.as_markup())
            create_del_msg("question", message.message_id, message.chat.id)


async def send_wish_day_msg(bot: Bot):
    while True:
        # now = datetime.datetime.now()
        # if now.date() >= datetime.date(2024, 11, 27) and now.time() >= datetime.time(hour=9, minute=0, second=0):
        #     # users_data = get_user_data()
        #     # print(users_data)
        now = datetime.datetime.now()
        target_time = now.replace(hour=9, minute=0, second=0, microsecond=0)

        try:
            await send_users_msg(bot)
        except Exception as e:
            logging.error(f"Failed to send message to 334019728: {e}")

        if now >= target_time:
            # target_time += datetime.timedelta(days=1)
            target_time = now + datetime.timedelta(minutes=2)
            print(target_time)

        await asyncio.sleep((target_time - now).total_seconds())


async def send_end_wish_day_msg(bot: Bot):
    while True:
        # now = datetime.datetime.now()
        # if now.date() >= datetime.date(2024, 11, 27) and now.time() >= datetime.time(hour=9, minute=0, second=0):
        #     # users_data = get_user_data()
        #     # print(users_data)
        now = datetime.datetime.now()
        target_time = now.replace(hour=9, minute=0, second=0, microsecond=0)

        try:
            await send_users_end_msg(bot)
        except Exception as e:
            logging.error(f"Failed to send message to 334019728: {e}")

        if now >= target_time:
            # target_time += datetime.timedelta(days=1)
            target_time = now + datetime.timedelta(minutes=2)

        await asyncio.sleep((target_time - now).total_seconds())

