import asyncio
import datetime
import logging

from aiogram import Router, Bot
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram import F

from core.db.scripts import get_user_data, get_user_by, get_wish_settings, update_day_counter, create_del_msg, \
    del_user_msgs, get_usr_by_tg, set_user_day, create_msg_to_send, get_send_msgs, set_msgs_sent
from core.keyboards.wish_kb import y_or_n, instruction_2, final_kb
from texts import INSTRUCTION

router = Router()


async def send_user_day(msg: Message, day: int, user: dict):
    wish_s = get_wish_settings()
    videos = wish_s['video'].get(str(day))
    if videos:
        if isinstance(videos, str):
            try:
                await msg.answer_video(video=videos)
            except Exception as e:
                logging.info(e)
        elif isinstance(videos, list):
            for video in videos:
                try:
                    await msg.answer_video(video=video)
                except Exception as e:
                    logging.info(e)
    await msg.answer(text=wish_s.get("tasks").get(str(user['day_counter'])), parse_mode=ParseMode.HTML)
    create_msg_to_send(
        user['tg_id'],
        datetime.datetime.now() + datetime.timedelta(seconds=15),
        "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Å–µ–∫—Ç–æ—Ä –∫–∞—Ä—Ç—ã —É–∂–µ –≥–æ—Ç–æ–≤?",
        msg_type="question"
    )


async def send_user_day_2(bot: Bot, text: str, user: dict):
    if user['day_counter'] <= 9:
        wish_s = get_wish_settings()
        videos = wish_s['video'].get(str(user['day_counter']))

        if videos:
            if isinstance(videos, str):
                try:
                    await bot.send_video(chat_id=user['tg_id'], video=videos)
                except Exception as e:
                    logging.info(e)
            elif isinstance(videos, list):
                for video in videos:
                    try:
                        await bot.send_video(chat_id=user['tg_id'], video=video)
                    except Exception as e:
                        logging.info(e)

        await bot.send_message(chat_id=user['tg_id'], text=text, parse_mode=ParseMode.HTML)
        create_msg_to_send(
            user['tg_id'],
            datetime.datetime.now() + datetime.timedelta(seconds=15),
            "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Å–µ–∫—Ç–æ—Ä –∫–∞—Ä—Ç—ã —É–∂–µ –≥–æ—Ç–æ–≤?",
            msg_type="question"
        )


async def send_user_day_3(bot: Bot, text: str, user: dict):
    wish_s = get_wish_settings()
    if "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ç–æ, —á—Ç–æ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç –ú–∞—Ä–∞—Ñ–æ–Ω –¥–æ –∫–æ–Ω—Ü–∞." in text:
        await bot.send_message(user['tg_id'], text, reply_markup=final_kb.as_markup())
    elif "–ù–∞—Å—Ç–∞–ª —Ç–æ—Ç —Å–∞–º—ã–π –¥–µ–Ω—å!" in text:
        videos = wish_s.get("video").get("10")
        await bot.send_message(user['tg_id'], text)
        for video in videos:
            try:
                await bot.send_video(user['tg_id'], video=video)
            except Exception as e:
                logging.info(e)
    else:
        await bot.send_message(user['tg_id'], text)


@router.callback_query()
async def get_callback(call: CallbackQuery):
    data = call.data
    user_data = get_user_by(call.message.chat.id)[0]
    wish_s = get_wish_settings()
    if data == "instruction":
        await call.message.answer(INSTRUCTION, reply_markup=instruction_2.as_markup())

    if call.data == "yes":
        await call.message.answer(text=wish_s.get("positive").get(str(user_data.get("day_counter"))), parse_mode=ParseMode.HTML)
        await call.message.edit_reply_markup(reply_markup=None)
        update_day_counter(call.message.chat.id)
        if user_data.get("day_counter") < 9:
            create_msg_to_send(call.message.chat.id,
                               datetime.datetime.now() + datetime.timedelta(seconds=10),
                               text=wish_s.get('tasks').get(str(user_data['day_counter'] + 1)),
                               msg_type="task"
                               )
        if user_data.get("day_counter") == 9:
            create_msg_to_send(call.message.chat.id,
                               datetime.datetime.now() + datetime.timedelta(seconds=20),
                               text="""–ñ–¥—É –æ—Ç –≤–∞—Å —Ñ–æ—Ç–æ –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –∂–µ–ª–∞–Ω–∏–π!

–¢–æ —á—Ç–æ –≤—ã –ø—Ä–∏—à–ª–µ—Ç–µ, –Ω–µ —É–≤–∏–¥–∏—Ç –Ω–∏–∫—Ç–æ –∫—Ä–æ–º–µ –≤–∞—Å. –ù–æ –∏–º–µ–Ω–Ω–æ —Å–µ–π—á–∞—Å, –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –≤–∞—à–µ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏: –∫–∞–∫—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–∞—Ä—Ç—ã –∂–µ–ª–∞–Ω–∏–π –≤—ã –≤—ã—à–ª–∏—Ç–µ, —Ç–æ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è.""",
                               msg_type="last"
                               )

    if call.data == "no":
        await call.message.answer(text=wish_s.get("negative").get(str(user_data.get("day_counter"))), parse_mode=ParseMode.HTML)
        await call.message.edit_reply_markup(reply_markup=None)
        update_day_counter(call.message.chat.id)
        if user_data.get("day_counter") <= 9:
            create_msg_to_send(call.message.chat.id,
                               datetime.datetime.now() + datetime.timedelta(seconds=10),
                               text=wish_s.get('tasks').get(str(user_data['day_counter'] + 1)),
                               msg_type="task"
                               )
            if user_data.get("day_counter") == 9:
                create_msg_to_send(call.message.chat.id,
                                   datetime.datetime.now() + datetime.timedelta(seconds=20),
                                   text="""–ñ–¥—É –æ—Ç –≤–∞—Å —Ñ–æ—Ç–æ –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –∂–µ–ª–∞–Ω–∏–π!

–¢–æ —á—Ç–æ –≤—ã –ø—Ä–∏—à–ª–µ—Ç–µ, –Ω–µ —É–≤–∏–¥–∏—Ç –Ω–∏–∫—Ç–æ –∫—Ä–æ–º–µ –≤–∞—Å. –ù–æ –∏–º–µ–Ω–Ω–æ —Å–µ–π—á–∞—Å, –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –≤–∞—à–µ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏: –∫–∞–∫—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–∞—Ä—Ç—ã –∂–µ–ª–∞–Ω–∏–π –≤—ã –≤—ã—à–ª–∏—Ç–µ, —Ç–æ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è.""",
                                   msg_type="last"
                                   )

    if call.data == "moon_calendar":
        await call.message.answer(text="""üéÑ01.01-13.01
‚ùÑÔ∏è30.01-11.02
üå§01.03- 13.03
‚òÄÔ∏è30.03-12.04
üçÄ28.04-11.05
üåø28.05-10.06
üå∏26.06-09.07
üçÑ‚Äçüü´25.07-08.08
üíê24.08-06.09
üåª22.09-05.10
üçÅ22.10-04.11
üåß21.11-04.12
üå≤21.12-31.12""", reply_markup=instruction_2.as_markup())

    if call.data == "start_magic":
        user = get_usr_by_tg(call.message.chat.id)
        if user:
            set_user_day(1, user["tg_id"])
            user['day_counter'] = 1
            await send_user_day(call.message, user['day_counter'], user)


async def send_daily_msgs(bot: Bot):
    while True:
        await asyncio.sleep(5)
        msgs = get_send_msgs()

        for msg in msgs:
            if msg['type'] == 'question':
                try:
                    await bot.send_message(chat_id=msg['chat_id'], text=msg['text'], reply_markup=y_or_n.as_markup())
                    set_msgs_sent(msg['id'])
                except Exception as e:
                    logging.info(e)
            elif msg['type'] == 'task':
                user = get_usr_by_tg(msg['chat_id'])
                try:
                    await send_user_day_2(bot, msg['text'], user)
                    set_msgs_sent(msg['id'])
                except Exception as e:
                    logging.info(e)
            else:
                user = get_usr_by_tg(msg['chat_id'])
                try:
                    await send_user_day_3(bot, msg['text'], user)
                    set_msgs_sent(msg['id'])
                except Exception as e:
                    logging.info(e)


@router.message(F.document | F.photo)
async def get_user_map(msg: Message):
    user = get_usr_by_tg(msg.chat.id)
    if user.get("day_counter") == 10:
        await msg.answer("üéâ", parse_mode=ParseMode.HTML)
        update_day_counter(user.get("tg_id"))
        create_msg_to_send(
            user['tg_id'],
            datetime.datetime.now() + datetime.timedelta(seconds=15),
            "–ù–∞—Å—Ç–∞–ª —Ç–æ—Ç —Å–∞–º—ã–π –¥–µ–Ω—å! –°–µ–≥–æ–¥–Ω—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –≤–∞—à–∞ –∫–∞—Ä—Ç–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∞ –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å!",
            "last"
        )
        create_msg_to_send(
            user['tg_id'],
            datetime.datetime.now() + datetime.timedelta(seconds=25),
            """–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ç–æ, —á—Ç–æ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç –ú–∞—Ä–∞—Ñ–æ–Ω –¥–æ –∫–æ–Ω—Ü–∞. –ü—É—Å—Ç—å —ç—Ç–∞ –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –≤–∞—à–∏–º –∫–æ–º–ø–∞—Å–æ–º –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π. –î–ª—è —ç—Ç–æ–≥–æ –≤–∞–º –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –æ–±—É—á–µ–Ω–∏–µ. –£–∑–Ω–∞—Ç—å –æ–± –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö Norland academy""",
            "last"
        )
